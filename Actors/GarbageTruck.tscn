[gd_scene load_steps=3 format=3 uid="uid://glakh53sg2yi"]

[ext_resource type="Texture2D" uid="uid://b2xgl5e070syl" path="res://Images/garbagetruck.png" id="1_h4y3w"]

[sub_resource type="GDScript" id="GDScript_7822p"]
script/source = "extends CharacterBody2D

@export var wheel_base = 70
@export var steering_angle = 15
@export var speed = 300.0
@export var acceleration_power = 600
@export var friction = -55
@export var drag = -0.06
@export var braking = -450
@export var max_speed_reverse = 250
var slip_speed = 400  # Speed where traction is reduced
var traction_fast = 2.5 # High-speed traction
var traction_slow = 10  # Low-speed traction

var acceleration = Vector2.ZERO
var steer_direction

func _physics_process(delta: float) -> void:
	# Get the input direction and handle the movement/deceleration.
	acceleration = Vector2.ZERO
	get_input()
	apply_friction(delta)
	new_calculate_steering(delta)
	velocity += acceleration * delta
	
	# As good practice, you should replace UI actions with custom gameplay actions.
	move_and_slide()
func apply_friction(delta):
	if acceleration == Vector2.ZERO and velocity.length() < 50:
		velocity = Vector2.ZERO
	var friction_force = velocity * friction * delta
	var drag_force = velocity * velocity.length() * drag * delta
	acceleration += drag_force + friction_force
func get_input():
	var turn = Input.get_axis('turn_left', 'turn_right')
	steer_direction = turn * deg_to_rad(steering_angle)
	if Input.is_action_pressed(\"forward\"):
		acceleration = transform.x * acceleration_power
	if Input.is_action_pressed(\"backward\"):
		acceleration = transform.x * braking

func calculate_steering(delta):
	var rear_wheel = position - transform.x * wheel_base / 2
	var front_wheel = position + transform.x * wheel_base / 2
	
	rear_wheel += velocity * delta
	front_wheel += velocity.rotated(steer_direction) * delta
	
	var new_heading = rear_wheel.direction_to(front_wheel)
	var d = new_heading.dot(velocity.normalized())
	if d > 0:
		velocity = new_heading * velocity.length()
	if d< 0:
		velocity = -new_heading * min(velocity.length(), max_speed_reverse)
	rotation = new_heading.angle()
	
func new_calculate_steering(delta):
	var rear_wheel = position - transform.x * wheel_base / 2.0
	var front_wheel = position + transform.x * wheel_base / 2.0
	rear_wheel += velocity * delta
	front_wheel += velocity.rotated(steering_angle) * delta
	var new_heading = rear_wheel.direction_to(front_wheel)
	var d = new_heading.dot(velocity.normalized())

	# choose which traction value to use - at lower speeds, slip should be low
	var traction = traction_slow
	if velocity.length() > slip_speed:
		traction = traction_fast
	if d > 0:
		velocity = lerp(velocity, new_heading * velocity.length(), traction * delta)
	if d < 0:
		velocity = -new_heading * min(velocity.length(), max_speed_reverse)
	rotation = new_heading.angle()

	
"

[node name="car" type="CharacterBody2D"]
script = SubResource("GDScript_7822p")

[node name="Sprite2D" type="Sprite2D" parent="."]
rotation = 1.5707964
scale = Vector2(0.109375, 0.15625)
texture = ExtResource("1_h4y3w")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
rotation = 1.5707964
scale = Vector2(0.109375, 0.15625)
polygon = PackedVector2Array(53.5, -231.5, -54.5, -231.5, -54.5, -228.5, -56, -223.5, -93.3, -223.5, -96.5, -220.3, -96.5, -215, -101.6, -213.5, -104.5, -213.5, -104.5, -111.5, -109.3, -111.5, -112.5, -108.3, -112.5, -103.5, -117.3, -103.5, -120.5, -100.3, -120.5, -95, -125.6, -93.5, -126.5, -93.5, -126.5, -73.399994, -126.3, -71.5, -104.5, -71.5, -104.5, 221.29999, -101.3, 224.5, -96.5, 224.5, -96.5, 229.29999, -93.3, 232.5, -88, 232.5, -86.5, 237.5, -86.5, 240.5, 84.3, 240.5, 87.5, 237.29999, 87.5, 232.5, 92.3, 232.5, 95.5, 229.29999, 95.5, 223.9, 100.600006, 222.5, 103.5, 222.5, 103.5, -71.7, 124.7, -73.5, 126.5, -73.5, 126.5, -93.3, 124.3, -95.5, 119.5, -95.5, 119.5, -100.3, 116.3, -103.5, 111, -103.5, 109.100006, -111.5, 103.5, -111.5, 103.5, -212.3, 100.3, -215.5, 95, -215.5, 93.5, -220.5, 93.5, -223.5, 55, -223.5, 53.5, -228.5)
