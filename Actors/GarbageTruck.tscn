[gd_scene load_steps=25 format=3 uid="uid://glakh53sg2yi"]

[ext_resource type="Texture2D" uid="uid://cds3exyraywkp" path="res://Images/cars/Top_Down_View.png" id="1_eo6ux"]
[ext_resource type="PackedScene" uid="uid://b3hodl73dbyq7" path="res://Actors/TentacleVacuum.tscn" id="2_eo6ux"]
[ext_resource type="PackedScene" uid="uid://she2eapydd2m" path="res://GameUI/MainCamera.tscn" id="2_vigmq"]
[ext_resource type="AudioStream" uid="uid://ce05x7voh6ai2" path="res://Sounds/Effects/tyre_screech.mp3" id="3_ih7wc"]
[ext_resource type="Script" uid="uid://d3dfn18pw7md6" path="res://Actors/audio_stream_player_2d.gd" id="4_vsqci"]
[ext_resource type="AudioStream" uid="uid://c37cvfutd051a" path="res://Sounds/Effects/bottle pop 1.mp3" id="6_emm83"]
[ext_resource type="AudioStream" uid="uid://by6aumwr3lgcc" path="res://Sounds/Effects/bottle pop 2.mp3" id="7_e2tdl"]
[ext_resource type="AudioStream" uid="uid://bi88lrxxdwfco" path="res://Sounds/Effects/bottle pop 3.mp3" id="8_33fjo"]
[ext_resource type="AudioStream" uid="uid://bj6p0bn10ie4a" path="res://Sounds/Effects/engine.mp3" id="9_e2tdl"]
[ext_resource type="AudioStream" uid="uid://c5ysk7c3dl33y" path="res://Sounds/Effects/bin shake.mp3" id="10_u2d1m"]
[ext_resource type="AudioStream" uid="uid://cmkrmkriosg61" path="res://Sounds/Effects/bin 3.mp3" id="11_1atvp"]
[ext_resource type="AudioStream" uid="uid://cf8e3uqii0h2d" path="res://Sounds/Effects/bins 4.mp3" id="12_hsprs"]
[ext_resource type="AudioStream" uid="uid://xxxaota8i3xk" path="res://Sounds/Effects/Upgrade_Sound_1.mp3" id="13_hsprs"]
[ext_resource type="AudioStream" uid="uid://0ajrsdlpurh7" path="res://Sounds/Effects/Upgrade_Sound_2.mp3" id="14_nmbvf"]
[ext_resource type="Texture2D" uid="uid://cf34sn1snl82j" path="res://Images/Dial_Arrow.png" id="15_nmbvf"]

[sub_resource type="GDScript" id="GDScript_7822p"]
script/source = "extends CharacterBody2D

@export var wheel_base = 70
@export var steering_angle = 20
@export var speed = 1000
@export var acceleration_power = 500
@export var friction = -40
@export var drag = -0.06
@export var braking = -450
@export var max_speed_reverse = 250
@export var slip_speed = 400  # Speed where traction is reduced
@onready var boost_bar = get_tree().get_first_node_in_group('boost_bar_scene')
var boostHeld = false
@onready var vacuum = get_tree().get_first_node_in_group('vacuum_scene')
var traction_fast = 0.5 # High-speed traction
var traction_slow = 10  # Low-speed traction
var stop_boosting_once = false
signal drift
signal not_drift
signal dumped_garbage(amount_dumped)
var lastFrameTurn
var acceleration = Vector2.ZERO
var steer_direction
var turn
var boost = 0
var can_boost = true
var score = 0
var label
var bar
var storageTotal = 5
@onready var storageNode = get_tree().get_first_node_in_group('storage_bar')
var storage = 0
@onready var scoreNode = get_node('MainCamera/CanvasLayer/UI/Score/ScoreNumber')

@onready var level = get_tree().get_first_node_in_group('')
@onready var dump = get_tree().get_first_node_in_group('dumping_ground')
var game_over = false
var paused_player_movement = false

func _ready() -> void:
	label = storageNode.get_node('StorageLabel')
	bar = storageNode.get_node('ProgressBar')
	empty_garbage()

func _process(_delta) -> void:
	
	var distance = (dump.global_position - $ArrowToDump.global_position).length()
	if distance < 600:
		$ArrowToDump.hide()
	else:
		$ArrowToDump.show()
	$ArrowToDump.global_rotation = global_position.direction_to(dump.global_position).angle() - PI/2
func _physics_process(delta: float) -> void:
	# Get the input direction and handle the movement/deceleration.
	if game_over:
		$TyreScreech.stop()
		return
	
	acceleration = Vector2.ZERO
	if not paused_player_movement:
		get_input()
	apply_friction(delta)
	new_calculate_steering(delta)
	pitch_sounds(delta)
	velocity += acceleration * delta
	# As good practice, you should replace UI actions with custom gameplay actions.
	move_and_slide()
	lastFrameTurn = turn

func pitch_sounds(delta):
	$EngineSound.pitch_scale = 1+velocity.length()/1000
	
func apply_friction(delta):
	if acceleration == Vector2.ZERO and velocity.length() < 50:
		velocity = Vector2.ZERO
	var friction_force = velocity * friction * delta
	var drag_force = velocity * velocity.length() * drag * delta
	acceleration += drag_force + friction_force
func get_input():
	
	turn = Input.get_axis('turn_left', 'turn_right')
	if (turn != lastFrameTurn):
		emit_signal('not_drift')
	
	steer_direction = turn * deg_to_rad(steering_angle)
	if Input.is_action_pressed(\"forward\"):
		acceleration = transform.x * acceleration_power
	if Input.is_action_pressed(\"backward\"):
		acceleration = transform.x * braking
	boost = 100
	var boost_value = boost_bar.get_node('ProgressBar').value
	if boost_value == 0:
		can_boost = false
	elif boost_value > 10:
		can_boost = true
		
	if boostHeld == true and (Input.is_action_just_released(\"boost\") or can_boost == false):
		stop_boosting()
	elif Input.is_action_pressed(\"boost\") and boostHeld == false and can_boost == true:
		boosting()
	
	

func calculate_steering(delta):
	var rear_wheel = position - transform.x * wheel_base / 2
	var front_wheel = position + transform.x * wheel_base / 2
	
	rear_wheel += velocity * delta
	front_wheel += velocity.rotated(steer_direction) * delta
	
	var traction = traction_slow
	
	var wheel_direction = rear_wheel.direction_to(front_wheel)
	if velocity.length() > slip_speed:
		traction = traction_fast
		wheel_direction = 1.1 * wheel_direction
	var new_heading = wheel_direction
	var d = new_heading.dot(velocity.normalized())
	if d > 0:
		velocity = new_heading * velocity.length()
	if d< 0:
		velocity = -new_heading * min(velocity.length(), max_speed_reverse)
	rotation = new_heading.angle()
	
func new_calculate_steering(delta):
	# Calculate the positions of the rear and front wheel
	var rear_wheel = position - transform.x * wheel_base / 2.0
	var front_wheel = position + transform.x * wheel_base / 2.0
	# Advance the wheels' positions based on the current velocity, applying rotation to the front wheel
	rear_wheel += velocity * delta
	front_wheel += velocity.rotated(steer_direction) * delta
	# Calculate the new heading based on the wheels' positions
	var new_heading = rear_wheel.direction_to(front_wheel)

	# Choose the traction model based on the current speed
	var traction = traction_slow

	
	if velocity.length() > slip_speed:
		traction = traction_fast
		if turn != 0:
			emit_signal('drift')
	else:
		emit_signal('not_drift')
		
	# Dot product represents how aligned the new heading is with the current velocity direction
	var d = new_heading.dot(velocity.normalized())

	# If not braking (d > 0), adjust the car velocity smoothly towards the new heading
	if d > 0:
		velocity = lerp(velocity, new_heading * velocity.length(), traction * delta)

	# If braking (d < 0), reverse the direction and limit the speed
	if d < 0:
		velocity = -new_heading * min(velocity.length(), max_speed_reverse)

	# Update the car's rotation to face in the direction of the new heading
	rotation = new_heading.angle()
	
func _on_drift() -> void:
	pass # Replace with function body.
	
func _on_garbage_sucked_in_garbage() -> void:
	print('car_receiving_suck')
	$HoseSuckSounds.play()

func garbage_sucked():
	$HoseSuckSounds.play()
	add_garbage()

func add_garbage():
	storage += 1
	label.text = str(storage) + '/' + str(storageTotal)
	bar.value = storage
	if storage == storageTotal:
		vacuum.disabled = true
	
func empty_garbage():
	var old_score = score
	if (storage != 0):
		var temp_score = 0
		for n in storage:
			temp_score += (randi() % 10) + 10
		modify_score(temp_score)
		storage = 0
		label = storageNode.get_node('StorageLabel')
		bar = storageNode.get_node('ProgressBar')
		label.text = str(storage) + '/' + str(storageTotal)
		bar.value = storage
		$EmptySound.play()
		vacuum.disabled = false
		print('Old score'+ str(old_score / 100))
		print('New score'+ str(score / 100))
		if old_score / 100 != score / 100:
			show_upgrades()
			
		
func show_upgrades():
	$MainCamera/CanvasLayer/UI/Upgrades/Grid.show()
	$MainCamera/CanvasLayer/UI/Upgrades.generate_upgrades()
func modify_score(new_score):
	score += new_score 
	scoreNode.text = '$'+str(score)
	
func boosting():
	boostHeld = true
	print('Start boosting')
	acceleration_power = acceleration_power + boost
	boost_bar.deplete()


func stop_boosting():
	boostHeld = false
	print('Stopping boosting')
	acceleration_power = acceleration_power - boost
	boost_bar.regain()

func upgrade(upgrade):
	match upgrade.effect:
		'Boost_Speed_Upgrade':
			boost += 100
		'Brake_Upgrade':
			braking -= 50
		'Engine_Upgrade':
			acceleration_power += 100
		'Gearbox_Upgrade':
			acceleration_power += 100
		'Reverse_Gear_Upgrade':
			max_speed_reverse += 50
		'Speed_Upgrade':
			speed += 150
		'Steering_Upgrade':
			steering_angle += 5
		'Storage_Upgrade':
			storageTotal += 5
			label.text = str(storage) + '/' + str(storageTotal)
			bar.max_value = storageTotal
		'Suction_Upgrade':
			vacuum.sucking_force += 2
		'Sucker_Reach_Upgrade':
			vacuum.suck_in_distance += 4
		'Glasses_Upgrade':
			$MainCamera.zoom -= Vector2(0.2, 0.2)
	$UpgradeSound.play()

func _on_dumping_hitbox_area_entered(area: Area2D) -> void:
	print('Entered this area', area.name)
	if area.name == 'DumpingGround':
		var storage_before_emptied = storage
		empty_garbage()
		emit_signal('dumped_garbage', storage_before_emptied)
"

[sub_resource type="Gradient" id="Gradient_eo6ux"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_vigmq"]
noise_type = 4
frequency = 0.267

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ih7wc"]
noise = SubResource("FastNoiseLite_vigmq")
color_ramp = SubResource("Gradient_eo6ux")
seamless = true

[sub_resource type="GDScript" id="GDScript_h4y3w"]
resource_name = "skid"
script/source = "extends Line2D

var point
@export var target = get_parent()
@export var wheel = 'Left'
@export var trailLength := 400          # -1: endless trail, 0: no trail, n: points in trail
var start_drift
var stop_drift
func _ready() -> void:
	print('ready')


func _process(delta:float) -> void:
	pass
func _on_car_drift() -> void:
	start_drift = true
	stop_drift = false
	global_position = Vector2.ZERO
	global_rotation = 0
	point = target.global_position
	add_point(point)
	if trailLength != -1:
		while get_point_count() > trailLength:
			remove_point(0)
	
func on_car_stop_drift():
	var skidNode = duplicate()
	
	skidNode.global_position = global_position
	skidNode.global_rotation = global_rotation
	clear_points()
	#skidNode.rotation = target.rotation
	#skidNode.global_position = target.global_position
	print('Not drifting')
	get_parent().get_parent().add_child(skidNode)
	points.clear()
func _on_car_not_drift() -> void:
	if (start_drift == true and stop_drift == false):
		on_car_stop_drift()
	start_drift = false
	stop_drift = true
	
	pass # Replace with function body.
"

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_gvevi"]
random_pitch = 1.16
random_volume_offset_db = 0.56
streams_count = 3
stream_0/stream = ExtResource("6_emm83")
stream_1/stream = ExtResource("7_e2tdl")
stream_2/stream = ExtResource("8_33fjo")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_e2tdl"]
size = Vector2(104, 38)

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_nmbvf"]
streams_count = 3
stream_0/stream = ExtResource("10_u2d1m")
stream_1/stream = ExtResource("11_1atvp")
stream_2/stream = ExtResource("12_hsprs")

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_m66w2"]
streams_count = 2
stream_0/stream = ExtResource("13_hsprs")
stream_1/stream = ExtResource("14_nmbvf")

[node name="car" type="CharacterBody2D" groups=["player"]]
z_index = 10
script = SubResource("GDScript_7822p")

[node name="Sprite2D" type="Sprite2D" parent="."]
z_index = 10
rotation = 1.5707964
scale = Vector2(0.47499287, 0.5791904)
texture = ExtResource("1_eo6ux")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
position = Vector2(0.3555584, 1.5541952e-08)
rotation = 1.5707964
scale = Vector2(0.20812427, 0.23526329)
polygon = PackedVector2Array(53.5, -231.5, -54.5, -231.5, -54.5, -228.5, -56, -223.5, -93.3, -223.5, -96.5, -220.3, -96.5, -215, -101.6, -213.5, -104.5, -213.5, -104.5, -111.5, -109.3, -111.5, -112.5, -108.3, -112.5, -103.5, -117.3, -103.5, -120.5, -100.3, -120.5, -95, -125.6, -93.5, -126.5, -93.5, -126.5, -73.399994, -126.3, -71.5, -104.5, -71.5, -104.5, 221.29999, -101.3, 224.5, -96.5, 224.5, -96.5, 229.29999, -93.3, 232.5, -88, 232.5, -86.5, 237.5, -86.5, 240.5, 84.3, 240.5, 87.5, 237.29999, 87.5, 232.5, 92.3, 232.5, 95.5, 229.29999, 95.5, 223.9, 100.600006, 222.5, 103.5, 222.5, 103.5, -71.7, 124.7, -73.5, 126.5, -73.5, 126.5, -93.3, 124.3, -95.5, 119.5, -95.5, 119.5, -100.3, 116.3, -103.5, 111, -103.5, 109.100006, -111.5, 103.5, -111.5, 103.5, -212.3, 100.3, -215.5, 95, -215.5, 93.5, -220.5, 93.5, -223.5, 55, -223.5, 53.5, -228.5)

[node name="SkidRight" type="Line2D" parent="." node_paths=PackedStringArray("target")]
position = Vector2(-1, 28)
points = PackedVector2Array(-27, 0)
default_color = Color(0.043137256, 0.043137256, 0.043137256, 0.4392157)
texture = SubResource("NoiseTexture2D_ih7wc")
texture_mode = 1
joint_mode = 1
begin_cap_mode = 1
end_cap_mode = 1
script = SubResource("GDScript_h4y3w")
target = NodePath("../RearRightWheel")
wheel = "Right"

[node name="SkidLeft" type="Line2D" parent="." node_paths=PackedStringArray("target")]
position = Vector2(0, -17)
points = PackedVector2Array(-29, -7)
default_color = Color(0.043137256, 0.043137256, 0.043137256, 0.4392157)
script = SubResource("GDScript_h4y3w")
target = NodePath("../RearLeftWheel")

[node name="RearRightWheel" type="Marker2D" parent="."]
position = Vector2(-44, 15)

[node name="RearLeftWheel" type="Marker2D" parent="."]
position = Vector2(-44, -15)

[node name="Vacuum" parent="." instance=ExtResource("2_eo6ux")]
z_index = 30
position = Vector2(-25, 0)

[node name="TyreScreech" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_ih7wc")
volume_db = -20.0
script = ExtResource("4_vsqci")

[node name="MainCamera" parent="." instance=ExtResource("2_vigmq")]
zoom = Vector2(0.995, 0.995)

[node name="HoseSuckSounds" type="AudioStreamPlayer" parent="."]
stream = SubResource("AudioStreamRandomizer_gvevi")
volume_db = -17.51

[node name="EngineSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource("9_e2tdl")
volume_db = -25.622
autoplay = true

[node name="DumpingHitbox" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="DumpingHitbox"]
shape = SubResource("RectangleShape2D_e2tdl")

[node name="EmptySound" type="AudioStreamPlayer" parent="."]
stream = SubResource("AudioStreamRandomizer_nmbvf")
volume_db = -9.886

[node name="UpgradeSound" type="AudioStreamPlayer" parent="."]
stream = SubResource("AudioStreamRandomizer_m66w2")
volume_db = -33.878

[node name="ArrowToDump" type="Sprite2D" parent="."]
modulate = Color(1, 1, 1, 0.5254902)
rotation = -1.5707964
texture = ExtResource("15_nmbvf")

[node name="Timer" type="Timer" parent="."]
wait_time = 5.0

[connection signal="drift" from="." to="SkidRight" method="_on_car_drift"]
[connection signal="drift" from="." to="SkidLeft" method="_on_car_drift"]
[connection signal="drift" from="." to="TyreScreech" method="_on_car_drift"]
[connection signal="not_drift" from="." to="SkidRight" method="_on_car_not_drift"]
[connection signal="not_drift" from="." to="SkidLeft" method="_on_car_not_drift"]
[connection signal="not_drift" from="." to="TyreScreech" method="_on_car_not_drift"]
[connection signal="area_entered" from="DumpingHitbox" to="." method="_on_dumping_hitbox_area_entered"]
[connection signal="timeout" from="Timer" to="." method="show_upgrades"]
